import { useState, useEffect } from 'react';
import { FiStar, FiGitBranch, FiEye, FiFilter, FiX } from 'react-icons/fi';

export function SearchResultsPage() {
    const [repos, setRepos] = useState([]);
    const [loading, setLoading] = useState(true);
    const [error] = useState(null); // removido uso do setError
    const [filters, setFilters] = useState({
        language: '',
        stars: '',
        sort: 'best-match',
        order: 'desc'
    });
    const [showFilters, setShowFilters] = useState(false);

    useEffect(() => {
        // Simula carregamento e define dados de exemplo
        setTimeout(() => {
            setRepos([
                {
                    id: 1,
                    full_name: 'exemplo/repositorio-demo',
                    html_url: '#',
                    private: false,
                    language: 'JavaScript',
                    forks_count: 42,
                    stargazers_count: 120,
                    watchers_count: 85,
                    updated_at: new Date().toISOString(),
                    description: 'Este é um repositório de exemplo com dados fictícios.'
                },
                {
                    id: 2,
                    full_name: 'exemplo/outro-repo',
                    html_url: '#',
                    private: true,
                    language: 'Python',
                    forks_count: 10,
                    stargazers_count: 75,
                    watchers_count: 33,
                    updated_at: new Date().toISOString(),
                    description: 'Outro exemplo de repositório. Apenas para visualização de layout.'
                }
            ]);
            setLoading(false);
        }, 1500);
    }, []);

    const handleFilterChange = (e) => {
        const { name, value } = e.target;
        setFilters(prev => ({ ...prev, [name]: value }));
    };

    const applyFilters = () => {
        setShowFilters(false);
    };

    const resetFilters = () => {
        setFilters({
            language: '',
            stars: '',
            sort: 'best-match',
            order: 'desc'
        });
    };

    return (
        <div className="min-h-screen bg-gray-50 py-8 px-4 sm:px-6 lg:px-8">
            <div className="max-w-7xl mx-auto">
                <div className="mb-8">
                    <div className="flex justify-between items-center mb-6">
                        <h1 className="text-2xl font-bold text-gray-900">Resultados da Busca</h1>
                        <button
                            onClick={() => setShowFilters(!showFilters)}
                            className="flex items-center px-4 py-2 bg-white border border-gray-300 rounded-md shadow-sm text-sm font-medium text-gray-700 hover:bg-gray-50"
                        >
                            <FiFilter className="mr-2" />
                            Filtros
                        </button>
                    </div>

                    {showFilters && (
                        <div className="bg-white p-6 rounded-lg shadow-md mb-6">
                            <div className="flex justify-between items-center mb-4">
                                <h2 className="text-lg font-medium">Filtrar Resultados</h2>
                                <button onClick={() => setShowFilters(false)}>
                                    <FiX className="text-gray-500" />
                                </button>
                            </div>

                            <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6">
                                <div>
                                    <label className="block text-sm font-medium text-gray-700 mb-1">Linguagem</label>
                                    <input
                                        type="text"
                                        name="language"
                                        value={filters.language}
                                        onChange={handleFilterChange}
                                        placeholder="JavaScript, Python..."
                                        className="w-full px-3 py-2 border border-gray-300 rounded-md"
                                    />
                                </div>
                                <div>
                                    <label className="block text-sm font-medium text-gray-700 mb-1">Mínimo de Stars</label>
                                    <input
                                        type="number"
                                        name="stars"
                                        value={filters.stars}
                                        onChange={handleFilterChange}
                                        placeholder="Ex: 100"
                                        className="w-full px-3 py-2 border border-gray-300 rounded-md"
                                    />
                                </div>
                                <div>
                                    <label className="block text-sm font-medium text-gray-700 mb-1">Ordenar por</label>
                                    <select
                                        name="sort"
                                        value={filters.sort}
                                        onChange={handleFilterChange}
                                        className="w-full px-3 py-2 border border-gray-300 rounded-md"
                                    >
                                        <option value="best-match">Melhor resultado</option>
                                        <option value="stars">Stars</option>
                                        <option value="forks">Forks</option>
                                        <option value="updated">Atualização</option>
                                    </select>
                                </div>
                                <div>
                                    <label
